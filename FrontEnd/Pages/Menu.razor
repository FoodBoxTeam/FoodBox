@page "/menu"
@using FrontEnd.Data;
@using System.Security.Claims;
@inject IDbContextFactory<FoodBoxDB> ContextFactory
@inject NavigationManager NavigationManager

<PageTitle>Menu</PageTitle>

@if (restaurants is not null)
{
    if (selectedRestaurantId != -1 && selectedRestaurant is not null)
    {
        <button class="btn-outline-warning" onclick="@(() => ChangeLocationAsync())">Change Location</button>
        <p class="text-warning">Changing Location will empty your cart</p>
        <!-- order_area_start -->
        <div class="order_area">
            <div class="container">
                <div class="row">
                    <div class="col-xl-12">
                        <div class="section_title mb-70">
                            <h3>Menu for: @selectedRestaurant.RestaurantName</h3>
                            <p></p>
                        </div>
                    </div>
                </div>
                <div class="row">
                    @foreach (var item in selectedRestaurant.RestaurantItems)
                    {
                        <div class="col-xl-4 col-md-6">
                            <div class="single_order">
                                <div class="order_thumb">
                                    <img src="Images/@item.Item.Image" class="rounded" style="height:17em;" alt="">
                                    <div class="order_prise">
                                        <span>@item.Price</span>
                                    </div>
                                    <AuthorizeView>
                                        @if(favsList.Where(fi => fi.ItemId == item.Item.Id).Count() > 0)
                                        {
                                            <button onclick="@(async Task () => await UnLikeItem(item.Item.Id))" class="order_love">♥</button>
                                        }
                                        else
                                        {
                                            <button onclick="@(async Task () => await LikeItem(item.Item.Id))" class="order_like">♥</button>
                                        }
                                    </AuthorizeView>
                                </div>
                                <div class="order_info">
                                    <h3><a href="orderingitem/@item.Item.Id/@selectedRestaurant.Id">@item.Item.ItemName</a></h3>
                                    <p>
                                        @item.Item.Ingredients
                                        <div class="text-black">@item.Item.Description</div>
                                    </p>
                                    <a href="orderingitem/@item.Item.Id/@selectedRestaurant.Id" class="boxed_btn">Add to Box!</a>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
        <!-- order_area_end -->
    }
    else
    {
        <div class="background">
            <div class="container">
                <div class="screen">
                    <div class="container" style="padding-top:3em;">
                        <label for="restaurant" class="label-large" style="color:green">Choose Restaurant Location</label>
                        <InputSelect id="restaurant" class="form-select label-large"
                        @bind-Value="@selectedRestaurantId">
                            @foreach (var rt in restaurants)
                            {
                                <option value="@rt.Id">@rt.RestaurantName</option>
                            }
                        </InputSelect>
                    <div class="container" style="padding-top: 5em">
                        <button class="btn" onclick="@(() => SelectedLocationAsync())">Submit Location</button>
                    </div>
                    <div class="container" style="padding-top: 2em">
                        <p class="alert alert-danger">Please select your location</p>
                    </div>
                    </div>
                </div>
            </div>
        </div>
    }
}
else
{
    <div>Loading...</div>
}

@code {
    [Parameter]
    public int Id { get; set; }
    [CascadingParameter]
    Task<AuthenticationState> AuthState { get; set; }
    private string ItemName { get; set; } = null!;
    private string? Description { get; set; }
    private Restaurant? selectedRestaurant { get; set; }
    private int selectedRestaurantId { get; set; } = -1;
    private List<Restaurant> restaurants { get; set; }
    private string[] orderingBy = new string[] { "Salad", "Main Dish", "Soup", "Apple", "Shake","Dessert"};
    private string selectedFilter { get; set; } = "Takeout";
    List<FavoriteItem> favsList { get; set; }
    Cart cart { get; set; }
    Customer customer;

    protected override async Task OnParametersSetAsync()
    {
        using var context = ContextFactory.CreateDbContext();
        restaurants = await context.Restaurants
            .Include(ri => ri.RestaurantItems)
            .OrderBy(ri => ri.Id)
            .ToListAsync();

        var a = await AuthState;
        var userId = a.User.FindFirstValue(ClaimTypes.NameIdentifier);

        var custs = await context.Customers.ToListAsync();
        if (userId is null)
        {
            if ((customer = Order.CheckForCustomer(custs)) is null)
            {
                var userAndCustomer = Order.CreateCustomer();
                context.Customers.Add(customer = userAndCustomer.Item2);
                context.Users.Add(userAndCustomer.Item1);
                await context.SaveChangesAsync();
            }
        }
        else
        {
            customer = custs.Where(opt => opt.UserId == userId).Single();
        }

        var oh = new OrderHistory(ContextFactory);
        cart = await oh.FindCustCartAsync(customer);

        if(cart.Restaurant is not null && cart.CartItems.Count() > 0)
        {
            selectedRestaurant = cart.Restaurant;
            selectedRestaurantId = cart.RestaurantId;
        }

        favsList = await context.FavoriteItems.Where(fi => fi.CustomerId == customer.Id).ToListAsync();
    }

    private async Task LikeItem(int itemId)
    {
        using var context = ContextFactory.CreateDbContext();
        var fi = new FavoriteItem()
            {
                ItemId = itemId,
                CustomerId = customer.Id
            };
        context.FavoriteItems.Add(fi);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("menu");
    }

    private async Task UnLikeItem(int itemId)
    {
        using var context = ContextFactory.CreateDbContext();
        await context.FavoriteItems.Where(fi => fi.ItemId == itemId).Where(fi => fi.CustomerId == customer.Id).ExecuteDeleteAsync();
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/menu");
    }

    private async Task ChangeLocationAsync()
    {
        var oh = new OrderHistory(ContextFactory);
        await oh.DeleteCustCartItems(cart);
        selectedRestaurantId = -1;
    }

    public async Task SelectedLocationAsync()
    {
        if (selectedRestaurantId != -1)
        {
            using var context = ContextFactory.CreateDbContext();
            Cart c = await context.Carts.Where(c => c.Id == cart.Id).SingleAsync();
            selectedRestaurant = await context.Restaurants
                .Include(r => r.RestaurantItems)
                .ThenInclude(ri => ri.Item)
                .Where(r => r.Id == selectedRestaurantId)
                .SingleAsync();
            c.RestaurantId = selectedRestaurantId;
            context.Entry(c).Property(c => c.RestaurantId).IsModified = true;
            await context.SaveChangesAsync();
            NavigationManager.NavigateTo("/menu");
        }
    }
}
