@page "/edititem/{SelectedItemId:int}"
@using FrontEnd.Data;
@using FrontEnd.Pages.Dto;
@using FrontEnd.Pages
@inject IDbContextFactory<FoodBoxDB> ContextFactory
@inject NavigationManager NavigationManager
@inject OrderState OrderState


<EditForm Model="selectedItemOrder">
    <DataAnnotationsValidator />
    <div class="background">
        <div class="container">
            <div class="screen">

                <div class="screen-body">
                    <div class="screen-body-item left">
                        <div class="app-title">
                            <span>@OrderState.ItemsInOrder.Where(id => id.RestrauntItem.Id == SelectedItemId).ToList()[0].RestrauntItem.Item.ItemName</span>
                        </div>
                    </div>
                    <div class="screen-body-item">
                        <div class="app-form">
                            <div class="app-form-group">
                                <InputSelect id="quantity" class="form-control"
                                @bind-Value="@quantityItem">
                                    @foreach (int num in quantity)
                                    {
                                        <option value="@num">@num</option>
                                    }
                                </InputSelect>
                            </div>
                            <div class="app-form-group buttons">
                                <button type="submit" class="app-form-button"
                                        disabled="@IsBusy" @onclick="HandleSubmit">
                                    Submit
                                </button>
                                <div style="color:grey;">Price: @(quantityItem * OrderState.ItemsInOrder.Where(id => id.RestrauntItem.Id == SelectedItemId).ToList()[0].RestrauntItem.Price)</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int SelectedItemId { get; set; }
    public EventCallback<bool> OnSubmit { get; set; }
    private EventCallback OnCancel { get; set; }
    private bool IsBusy { get; set; }
    public int quantityItem { get; set; } = 1;
    private int[] quantity = new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    OrderingItemDto selectedItemOrder { get; set; } = new();

    private async Task HandleValidSubmit()
    {
        if (OnSubmit.HasDelegate)
        {
            await OnSubmit.InvokeAsync(true);
        }
    }
    private async Task HandleInvalidSubmit()
    {
        if (OnSubmit.HasDelegate)
        {
            await OnSubmit.InvokeAsync(false);
        }
    }
    private async Task HandleCancel()
    {
        if (OnCancel.HasDelegate)
        {
            await OnCancel.InvokeAsync();
        }
    }
    private void HandleSubmit()
    {
        OrderState.ItemsInOrder.Where(id => id.RestrauntItem.Id == SelectedItemId).ToList()[0].Quantity = quantityItem;
        OrderState.ItemsInOrder.Where(id => id.RestrauntItem.Id == SelectedItemId).ToList()[0].PriceXQty = quantityItem * OrderState.ItemsInOrder.Where(id => id.RestrauntItem.Id == SelectedItemId).ToList()[0].RestrauntItem.Price;
        NavigateToOrderPage();
    }

    protected override async Task OnInitializedAsync()
    {
        quantityItem = OrderState.ItemsInOrder.Where(id => id.RestrauntItem.Id == SelectedItemId).ToList()[0].Quantity;
    }

    private void NavigateToOrderPage()
    {
        NavigationManager.NavigateTo($"/order");
    }
}