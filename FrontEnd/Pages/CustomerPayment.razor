@page "/CustomerPayment"
@using FrontEnd.Data;
@using FrontEnd.Pages.Dto;
@using System.Security.Claims;
@inject IDbContextFactory<FoodBoxDB> ContextFactory
@inject NavigationManager NavigationManager

<!-- Start of Google Authorization -->
<AuthorizeView>
    <Authorized>
        <div>
            Wellcome! @context.User.Identity?.Name
        </div>
    </Authorized>
</AuthorizeView>
<!-- End Google Authorization -->
<h3>Your Order: </h3>
@if (cart is not null && cart.CartItems.Count() > 0)
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">Picture</th>
                <th scope="col">Name</th>
                <th scope="col">Quantity</th>
                <th scope="col">Edit</th>
                <th scope="col">Price</th>
                <th scope="col">Remove</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var cartItem in cart.CartItems)
            {
                <tr>
                    <td><img src="Images/@cartItem.Item.Image" class="rounded-pill" alt="@cartItem.Item.ItemName image" style="height:13em;"></td>
                    <td>@cartItem.Item.ItemName</td>
                    <td>@cartItem.Quantity</td>
                    <td><a href="edititem/@cartItem.Id" class="boxed_btn" style="color:black;">Edit</a></td>
                    <td>@(cartItem.ActualPrice * cartItem.Quantity)</td>
                    <td><a href="/removeItem/@cartItem.Id" class="boxed_btn" style="color:black;">Remove</a></td>
                </tr>
            }
        </tbody>
    </table>
    <h3>Order Total: @orderTotal</h3>
    <h3>Order Total With Tax: @(Math.Round(orderTotal * 1.073m, 2))</h3>
    <div class="container">
        <label for="restaurant" class="label-large" style="padding-bottom:0.5em;">Select Order Method</label>
        <InputSelect id="restaurant" class="form-select label-large" style="padding-bottom:0.5em;"
        @bind-Value="@selectedOrderMethod">
            @foreach (var om in orderMethods)
            {
                <option value="@om">@om</option>
            }
        </InputSelect>
    </div>
    @* <-->This is for the addresses</--> *@

    @if (selectedOrderMethod == "Delivery")
    {
        <!-- Header Section -->
        @* <header class="bg-dark text-white text-center p-4">
            Customer Address and Payment
        </header> *@
        <!-- Address and Payment Form -->
        <section class="container mt-5" id="customer-form">
            <div class="row justify-content-center">
                <div class="col-md-6">
                    <h2>
                        Enter Your Address and Payment Details
                    </h2>
                    <form id="customerForm">
                        <div class="form-group">
                            <label for="fullName">
                                Full Name:
                            </label>
                            <input class="form-control" id="fullName" placeholder="John Doe" required="" type="text" />
                        </div>
                        <div class="form-group">
                            <label for="address">
                                Address:
                            </label>
                            <textarea class="form-control" id="address" placeholder="Enter your address" required=""></textarea>
                        </div>
                        <div class="form-group">
                            <label for="cardNumber">
                                Card Number:
                            </label>
                            <input class="form-control" id="cardNumber" @bind-value="cardNumber" maxlength="19" placeholder="1234 5678 1234 5678" required="" type="text" />
                        </div>
                        <div class="form-group">
                            <label for="expiryDate">
                                Expiry Date:
                            </label>
                            <input class="form-control" id="expiryDate" required="" type="month" />
                        </div>
                        <div class="form-group">
                            <label for="cvv">
                                CVV:
                            </label>
                            <input class="form-control" id="cvv" maxlength="3" placeholder="123" required="" type="number" />
                        </div>
                        <button class="btn btn-primary w-100" type="submit"
                                disabled="@IsBusy" onclick="@(async Task () => await HandleSubmit())">
                            Submit
                        </button>
                    </form>
                </div>
            </div>
        </section>
    }
    else
    {
        <section class="container mt-5" id="customer-form">
            <div class="row justify-content-center">
                <div class="col-md-6">
                    <h2>
                        Enter Your Address and Payment Details
                    </h2>
                    <form id="customerForm">
                        <div class="form-group">
                            <label for="fullName">
                                Full Name:
                            </label>
                            <input class="form-control" id="fullName" placeholder="John Doe" required="" type="text" />
                        </div>
                        <div class="form-group">
                            <label for="cardNumber">
                                Card Number:
                            </label>
                            <input class="form-control" @bind-value="cardNumber" id="cardNumber" required="" maxlength="19" placeholder="1234 5678 1234 5678" type="text" />
                        </div>
                        <div class="form-group">
                            <label for="expiryDate">
                                Expiry Date:
                            </label>
                            <input class="form-control" id="expiryDate" required="" type="month" />
                        </div>
                        <div class="form-group">
                            <label for="cvv">
                                CVV:
                            </label>
                            <input class="form-control" id="cvv" maxlength="3" required="" placeholder="123" type="number" />
                        </div>
                        <button class="btn btn-primary w-100" type="submit"
                                disabled="@IsBusy" onclick="@(async Task () => await HandleSubmit())">
                            Submit
                        </button>
                    </form>
                </div>
            </div>
        </section>
    }
}
else
{
    <img class="emtbox" src="/Images/EmptyBox.png" />
}

@code {
    private decimal orderTotal { get; set; } = 0;
    private EventCallback<bool> OnSubmit { get; set; }
    private EventCallback OnCancel { get; set; }
    private bool IsBusy { get; set; }
    private List<string> orderMethods = new() { "Takeout", "Delivery" };
    public string selectedOrderMethod { get; set; } = "Delivery";
    private int[] quantity = new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    private string userAddress { get; set; }
    private bool isDelivered { get; set; } = true;
    bool PopupVisible { get; set; }
    private Cart cart { get; set; }
    private CartItem cartItem { get; set; }
    private Customer customer { get; set; }
    string cardNumber { get; set; }
    private List<PurchaseItem> finalPurchaseItems = new();

    [CascadingParameter]
    public Task<AuthenticationState>? AuthState { get; set; }


    //private int

    private async Task HandleValidSubmit()
    {
        if (OnSubmit.HasDelegate)
        {
            await OnSubmit.InvokeAsync(true);
        }
    }
    private async Task HandleInvalidSubmit()
    {
        if (OnSubmit.HasDelegate)
        {
            await OnSubmit.InvokeAsync(false);
        }
    }
    private async Task HandleCancel()
    {
        if (OnCancel.HasDelegate)
        {
            await OnCancel.InvokeAsync();
        }
    }
    private async Task HandleSubmit()
    {
        if(cardNumber is not null)
        {
            await FinishPurchase();
            NavigationManager.NavigateTo("/Confirmation");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var context = ContextFactory.CreateDbContext();

        var a = await AuthState;
        var userId = a.User.FindFirstValue(ClaimTypes.NameIdentifier);
        var custs = await context.Customers.ToListAsync();

        if (userId is null)
        {
            if ((customer = Order.CheckForCustomer(custs)) is null)
            {
                var userAndCustomer = Order.CreateCustomer();
                context.Customers.Add(customer = userAndCustomer.Item2);
                context.Users.Add(userAndCustomer.Item1);
                await context.SaveChangesAsync();
            }
        }
        else
        {
            customer = custs.Where(opt => opt.UserId == userId).Single();
        }

        cart = await context.Carts
            .Where(c => c.CustomerId == customer.Id)
            .Include(c => c.CartItems)
            .ThenInclude(ci => ci.Item)
            .SingleAsync();

        @foreach (var cartItem in cart.CartItems)
        {
            orderTotal += cartItem.ActualPrice * cartItem.Quantity;
        }

        orderTotal = Math.Round(orderTotal, 2);

        if(cart.CartItems.Count() < 1)
        {
            NavigationManager.NavigateTo("/Confirmation");
        }
    }

    private void SelectedOrderMethodUser()
    {
        if (selectedOrderMethod == "Delivery")
        {
            userAddress = selectedOrderMethod;
            isDelivered = true;
        }
        else
        {

            isDelivered =  false; 
        }
    }

    private async Task<Purchase> AddPurchase()
    {
        var dbcontext = ContextFactory.CreateDbContext();
        var purchase = new Purchase()
            {
                PurchaseDate = DateOnly.FromDateTime(DateTime.Now),
                CustomerId = customer.Id,
                RestaurantId = cart.RestaurantId
            };

        dbcontext.Purchases.Add(purchase);
        await dbcontext.SaveChangesAsync();

        purchase = (await dbcontext.Purchases.Where(p => p.CustomerId == customer.Id)
            .ToListAsync()).MaxBy(p => p.PurchaseDate);

        List<PurchaseItem> purchaseItems = ParseCartItemsIntoPurchaseItems(cart.CartItems, purchase.Id);

        var transaction = new PurchaseTransaction()
        {
            PurchaseId = purchase.Id,
            CreditCardNumber = cardNumber,
            AmountPaid = Math.Round(orderTotal * 1.073m, 2)
        };

        dbcontext.PurchaseTransactions.Add(transaction);
        dbcontext.PurchaseItems.AddRange(purchaseItems);
        await dbcontext.SaveChangesAsync();

        return purchase;
    }

    public async Task FinishPurchase()
    {
        await AddPurchase();
        await DeleteCartItems();
    }

    private List<PurchaseItem> ParseCartItemsIntoPurchaseItems(IEnumerable<CartItem> ciList, int purchaseId)
    {
        List<PurchaseItem> piList = new();

        foreach(var ci in ciList)
        {
            piList.Add(
                new PurchaseItem()
                {
                    ItemId = ci.ItemId,
                    Quantity = ci.Quantity,
                    ActualPrice = ci.ActualPrice,
                    PurchaseId = purchaseId
                }
            );
        }

        return piList;
    }

    public async Task DeleteCartItems()
    {
        using var dbContext = ContextFactory.CreateDbContext();
        await dbContext.CartItems.Where(ci => ci.CartId == cart.Id).ExecuteDeleteAsync();
        await dbContext.SaveChangesAsync();
    }
}
