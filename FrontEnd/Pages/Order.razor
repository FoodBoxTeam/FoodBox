@page "/order"
@using FrontEnd.Data;
@using FrontEnd.Pages.Dto;
@inject IDbContextFactory<FoodBoxDB> ContextFactory
@inject NavigationManager NavigationManager
@inject OrderState OrderState

<h3 class="emtbox">Your Order: </h3>
@if (OrderState.ItemsInOrder.Count > 0)
{

    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">Picture</th>
                <th scope="col">Name</th>
                <th scope="col">Quantity</th>
                <th scope="col">Price</th>
            </tr>
        </thead>
        <tbody>

            @foreach (var restautantItem in OrderState.ItemsInOrder)
            {
                <tr>
                    <td><img src="Images/@restautantItem.RestrauntItem.Item.Image" class="rounded-pill" alt="@restautantItem.RestrauntItem.Item.ItemName image" style="height:13em;"></td>
                    <td>@restautantItem.RestrauntItem.Item.ItemName</td>
                    <td>@restautantItem.Quantity</td>
                    <td>@restautantItem.PriceXQty</td>
                </tr>
            }
            
        </tbody>
    </table>
    <h3>Order Total: @orderTotal</h3>
}
else
{
    <img class="emtbox" src="/Images/EmptyBox.png"/>
}

@code {
    private decimal orderTotal { get; set; } = 0;
    private EventCallback<bool> OnSubmit { get; set; }
    private EventCallback OnCancel { get; set; }
    private bool IsBusy { get; set; }

    // private async Task HandleValidSubmit()
    // {
    //     if (OnSubmit.HasDelegate)
    //     {
    //         await OnSubmit.InvokeAsync(true);
    //     }
    // }
    // private async Task HandleInvalidSubmit()
    // {
    //     if (OnSubmit.HasDelegate)
    //     {
    //         await OnSubmit.InvokeAsync(false);
    //     }
    // }
    // private async Task HandleCancel()
    // {
    //     if (OnCancel.HasDelegate)
    //     {
    //         await OnCancel.InvokeAsync();
    //     }
    // }
    // private async Task HandleSubmit()
    // {
    //     selectedItemOrder.ItemId = SelectedItemId;
    //     selectedItemOrder.Quantity = quantityItem;
    //     selectedItemOrder.ItemPrice = quantityItem * restaurantsAndItems[RestaurantId - 1].RestaurantItems.Where(id => id.ItemId == (SelectedItemId + 1)).ToList()[0].Price;
    //     selectedItemOrders.Add(selectedItemOrder);
    //     NavigateToOrderPage();
    // }

    protected override void OnInitialized()
    {
        OrderState = MergeItemsInList(OrderState);
    }

    OrderState MergeItemsInList(OrderState oldOrderState)
    {
        List<int> containedItems = new();
        OrderState tempOrderState = new();
        oldOrderState.itemCount = 0;

        foreach (var orderingItem in oldOrderState.ItemsInOrder)
        {
            oldOrderState.itemCount = oldOrderState.itemCount + 1;
            if (!containedItems.Contains(orderingItem.RestrauntItem.Id))
            {
                containedItems.Add(orderingItem.RestrauntItem.Id);
                tempOrderState.ItemsInOrder.Add(orderingItem);
            }
            else
            {
                if (oldOrderState.itemCount > oldOrderState.previousItemCount)
                {
                    var specifiedItem = tempOrderState.ItemsInOrder.Where(iio => iio.RestrauntItem.Id == orderingItem.RestrauntItem.Id).Single();
                    specifiedItem.Quantity += orderingItem.Quantity;
                    specifiedItem.PriceXQty += orderingItem.PriceXQty;
                }
            }
        }

        for (int i = 0; i < oldOrderState.itemCount; i++)
        {
            orderTotal += oldOrderState.ItemsInOrder[i].PriceXQty;
        }

        oldOrderState.previousItemCount = oldOrderState.ItemsInOrder.Count;
        return tempOrderState;
    }
}
