@page "/order_history"
@using System.Security.Claims;
@attribute [Authorize()]
@inject IDbContextFactory<FoodBoxDB> dbcontextfactory

<PageTitle>Order History</PageTitle>

@if (orderHistory is not null)
{

    @foreach (var purchase in orderHistory)
    {
    <table class="table table-striped">
        <thead>
                <tr>
                    @foreach (var item in purchase.PurchaseItems)
                    {
                        <th scope="col">@item.Item.ItemName - @item.Quantity</th> @*We want this centered*@
                    }
                    <th scope="col">@purchase.PurchaseDate</th>
                </tr>
        </thead>
        <tbody>
                <tr>
                @foreach (var item in purchase.PurchaseItems)
                {
                    <td><img src="Images/@item.Item.Image" class="rounded" style="height:17em;" alt=""></td>
                }
                    <th><button class="btn-primary">Reorder</button></th>
                </tr>
        </tbody>
    </table>
       
    }
}

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    public IEnumerable<Purchase> orderHistory { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var dbContext = dbcontextfactory.CreateDbContext();
        var a = await AuthState;
        var userId = a.User.FindFirstValue(ClaimTypes.NameIdentifier);
        var customer = await dbContext.Customers.Where(opt => opt.UserId == userId).SingleAsync();
        orderHistory = await dbContext.Purchases
            .Where(opt => opt.CustomerId == customer.Id)
            .Include(p => p.PurchaseItems)
            .ThenInclude(pi => pi.Item)
            .ToListAsync();
        StateHasChanged();
    }
}
