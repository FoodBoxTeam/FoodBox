@page "/order_history"
@using System.Security.Claims;
@attribute [Authorize()]
@inject IDbContextFactory<FoodBoxDB> dbcontextfactory
@inject NavigationManager NavigationManager

<PageTitle>Order History</PageTitle>

@if (orderHistory is not null)
{

    @foreach (var purchase in orderHistory)
    {
    <table class="table table-striped">
        <thead>
                <tr>
                    @foreach (var item in purchase.PurchaseItems)
                    {
                        <th scope="col">@item.Item.ItemName - @item.Quantity</th> @*We want this centered*@
                    }
                    <th scope="col">@purchase.PurchaseDate</th>
                </tr>
        </thead>
        <tbody>
                <tr>
                @foreach (var item in purchase.PurchaseItems)
                {
                    <td><img src="Images/@item.Item.Image" class="rounded" style="height:17em;" alt=""></td>
                }
                    <th><button onclick="@(() => UpdateCartAsync(purchase.Id))" class="btn-primary">Reorder</button></th>
                </tr>
        </tbody>
    </table>
       
    }
}
else
{
    <h3>No orders to show</h3>
}

@code {
    public OrderHistory() { }

    public OrderHistory(IDbContextFactory<FoodBoxDB> dbf)
    {
        dbcontextfactory = dbf;
    }

    [CascadingParameter]
    public Task<AuthenticationState>? AuthState { get; set; }
    private Customer? customer { get; set; }

    public IEnumerable<Purchase> orderHistory { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = dbcontextfactory.CreateDbContext();
        var a = await AuthState;

        var userId = a.User.FindFirstValue(ClaimTypes.NameIdentifier);
        var custs = await context.Customers.ToListAsync();

        if (userId is null)
        {
            if ((customer = Order.CheckForCustomer(custs)) is null)
            {
                var userAndCustomer = Order.CreateCustomer();
                context.Customers.Add(customer = userAndCustomer.Item2);
                context.Users.Add(userAndCustomer.Item1);
                await context.SaveChangesAsync();
            }
        }
        else
        {
            customer = custs.Where(opt => opt.UserId == userId).Single();
        }

        if ((await context.Purchases.Where(p => p.CustomerId == customer.Id).ToListAsync()).Count() > 0)
        {
            orderHistory = await context.Purchases
                .Where(opt => opt.CustomerId == customer.Id)
                .Include(p => p.Restaurant)
                .Include(p => p.PurchaseItems)
                .ThenInclude(pi => pi.Item)
                .ToListAsync();

            orderHistory.OrderBy(o => o.PurchaseDate);
        }
    }
    public async Task UpdateCartAsync(int id)
    {
        using var dbContext = dbcontextfactory.CreateDbContext();
        var purchase = orderHistory.Where(p => p.Id == id).Single();


        await ClearAndFindCustCartAsync(customer, purchase.Restaurant);

        foreach(var item in purchase.PurchaseItems)
        {
            await AddItemToCustomersCartAsync(customer, item.Item, purchase.Restaurant, item.ActualPrice, item.Quantity);
        }

        NavigationManager.NavigateTo("/order");
    }

    public async Task AddItemToCustomersCartAsync(Customer customer, Item item, Restaurant restaurant, decimal price, int quantity)
    {
        var custCart = await FindCustCartAsync(customer, restaurant);
        using var dbContext = dbcontextfactory.CreateDbContext();
        custCart.RestaurantId = restaurant.Id;
        custCart.CustomerId = customer.Id;
        dbContext.Entry(custCart).Property(p => p.RestaurantId).IsModified = true;
        dbContext.Entry(custCart).Property(p => p.CustomerId).IsModified = true;

        if (custCart.CartItems.Where(cc => cc.Item.Id == item.Id).Count() > 0)
        {
            custCart.CartItems.Where(cc => cc.Item.Id == item.Id).Single().Quantity += quantity;
            if (custCart.CartItems.Where(cc => cc.Item.Id == item.Id).Single().Quantity > 10)
            {
                custCart.CartItems.Where(cc => cc.Item.Id == item.Id).Single().Quantity = 10;
            }
            dbContext.Entry(custCart.CartItems.Where(cc => cc.Item.Id == item.Id).Single()).Property(p => p.Quantity).IsModified = true;
            await dbContext.SaveChangesAsync();
        }
        else
        {
            var newCartItem = new CartItem()
                {
                    CartId = custCart.Id,
                    ItemId = item.Id,
                    ActualPrice = price,
                    Quantity = quantity

                };
            dbContext.CartItems.Add(newCartItem);
        }
        await dbContext.SaveChangesAsync();
    }

    public async Task DeleteCustCartItems(Cart cart)
    {
        using var dbContext = dbcontextfactory.CreateDbContext();
        await dbContext.CartItems.Where(ci => ci.CartId == cart.Id).ExecuteDeleteAsync();
    }

    public async Task<Cart> FindCustCartAsync(Customer customer, Restaurant restaurant = null)
    {
        using var dbContext = dbcontextfactory.CreateDbContext();
        Cart customersCart;
        try
        {
            customersCart = await dbContext.Carts
                    .Include(c => c.Restaurant)
                    .ThenInclude(r => r.RestaurantItems)
                    .ThenInclude(ri => ri.Item)
                    .Include(ci => ci.CartItems)
                    .ThenInclude(ci => ci.Item)
                    .FirstOrDefaultAsync(c => c.CustomerId == customer.Id);

        }
        catch (NullReferenceException e)
        {
            customersCart = await dbContext.Carts
                    .Include(c => c.Restaurant)
                    .Include(ci => ci.CartItems)
                    .ThenInclude(ci => ci.Item)
                    .FirstOrDefaultAsync(c => c.CustomerId == customer.Id);
        }

        if (customersCart is null)
        {
            var newCart = new Cart() { CustomerId = customer.Id };

            if(restaurant is not null) 
                newCart.RestaurantId = restaurant.Id;

            dbContext.Carts.Add(newCart);

            await dbContext.SaveChangesAsync();
            customersCart = newCart;
        }

        return customersCart;
    }

    public async Task<Cart> ClearAndFindCustCartAsync(Customer c, Restaurant r)
    {
        Cart cart = await FindCustCartAsync(c, r);
        await DeleteCustCartItems(cart);
        return cart;
    }
}
