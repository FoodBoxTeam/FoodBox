@page "/orderingitem/{SelectedItemId:int}/{RestaurantId:int}"
@using FrontEnd.Data;
@using FrontEnd.Pages.Dto;
@using FrontEnd.Pages
@inject IDbContextFactory<FoodBoxDB> ContextFactory
@inject NavigationManager NavigationManager
@inject OrderState OrderState

@if (menuItems is not null && restaurantsAndItems is not null)
{
    <EditForm Model="selectedItemOrder">
        <DataAnnotationsValidator />
        <div class="background">
            <div class="container">
                <div class="screen">

                    <div class="screen-body">
                        <div class="screen-body-item left">
                            <div class="app-title">
                                <span>@restaurantsAndItems[RestaurantId - 1].RestaurantItems.Where(id => id.ItemId == SelectedItemId).Single().Item.ItemName</span>
                            </div>
                            <div class="app-contact">CONTACT INFO : +1 314 928 0595</div>
                        </div>
                        <div class="screen-body-item">
                            <div class="app-form">
                                <div class="app-form-group">
                                    <InputSelect id="quantity" class="form-control"
                                    @bind-Value="@quantityItem">
                                        @foreach (int num in quantity)
                                        {
                                            <option value="@num">@num</option>
                                        }
                                    </InputSelect>
                                </div>
                                <div class="app-form-group buttons">
                                    <button type="submit" class="app-form-button"
                                            disabled="@IsBusy" @onclick="HandleSubmit">
                                        Submit
                                    </button>
                                    <div style="color:grey;">Price: @(quantityItem * restaurantsAndItems[RestaurantId - 1].RestaurantItems.Where(id => id.ItemId == SelectedItemId).Single().Price)</div>
                                    @* <div>itemOrder for testing:</div>
                                    <div>Id: @selectedItemOrder.ItemId</div>
                                    <div>Quantity: @selectedItemOrder.Quantity</div>
                                    <div>Price: @selectedItemOrder.ItemPrice</div> *@
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

    </EditForm>
}
else
{
    <p>Loading page</p>
}

@code {
    [Parameter]
    public int SelectedItemId { get; set; }
    [Parameter]
    public int RestaurantId { get; set; }
    private List<Item>? menuItems { get; set; }
    private List<Restaurant>? restaurantsAndItems { get; set; }
    [Parameter]
    public decimal price { get; set; }
    [Parameter]
    public EventCallback<bool> OnSubmit { get; set; }
    private EventCallback OnCancel { get; set; }
    private bool IsBusy { get; set; }
    [Parameter]
    public int quantityItem { get; set; } = 1;
    private int[] quantity = new int[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    OrderingItemDto selectedItemOrder { get; set; } = new();

    private async Task HandleValidSubmit()
    {
        if (OnSubmit.HasDelegate)
        {
            await OnSubmit.InvokeAsync(true);
        }
    }
    private async Task HandleInvalidSubmit()
    {
        if (OnSubmit.HasDelegate)
        {
            await OnSubmit.InvokeAsync(false);
        }
    }
    private async Task HandleCancel()
    {
        if (OnCancel.HasDelegate)
        {
            await OnCancel.InvokeAsync();
        }
    }
    private void HandleSubmit()
    {
        if (restaurantsAndItems is not null)
        {
            selectedItemOrder.RestrauntItem = restaurantsAndItems[RestaurantId - 1].RestaurantItems.Where(id => id.ItemId == SelectedItemId).Single();
            selectedItemOrder.Quantity = quantityItem;
            selectedItemOrder.PriceXQty = quantityItem * restaurantsAndItems[RestaurantId - 1].RestaurantItems.Where(id => id.ItemId == SelectedItemId).Single().Price;
            OrderState.ItemsInOrder.Add(selectedItemOrder);
            NavigateToOrderPage();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        using var context = ContextFactory.CreateDbContext();
        menuItems = await context.Items.ToListAsync();
        restaurantsAndItems = await context.Restaurants
            .Include(ri => ri.RestaurantItems)
            .ToListAsync();
    }

    private void NavigateToOrderPage()
    {
        NavigationManager.NavigateTo($"/order");
    }
}